Index: QueryVortex.Core/OperatorParser.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace QueryVortex.Core;\r\n\r\npublic static class OperatorParser\r\n{\r\n    private static readonly Dictionary<string, Func<string, object[], ICondition>> OperatorAliases =\r\n        InitializeOperatorAliases();\r\n\r\n    private static Dictionary<string, Func<string, object[], ICondition>> InitializeOperatorAliases()\r\n    {\r\n        return new Dictionary<string, Func<string, object[], ICondition>>\r\n        {\r\n            { \"in\", CreateInOperator },\r\n            { \"notin\", CreateNotInOperator },\r\n            { \"eq\", CreateEqualOperator },\r\n            { \"like\", CreateLikeOperator },\r\n            { \"neq\", CreateNotEqualOperator },\r\n            { \"notlike\", CreateNotLikeOperator },\r\n            { \"lt\", CreateLessThanOperator },\r\n            { \"gt\", CreateGreaterThanOperator },\r\n            { \"lte\", CreateLessOrEqualThanOperator },\r\n            { \"gte\", CreateGreaterOrEqualThanOperator },\r\n            { \"startswith\", CreateStartsWithOperator },\r\n            { \"endswith\", CreateEndsWithOperator }\r\n        };\r\n    }\r\n\r\n    private static void ValidateValues(object[] values)\r\n    {\r\n        if (values == null || values.Length == 0)\r\n            throw new ArgumentException(\"Values array cannot be null or empty.\", nameof(values));\r\n    }\r\n\r\n    private static ICondition CreateOperator(Func<string, object[], ICondition> operatorFactory, string column,\r\n        object[] values)\r\n    {\r\n        try\r\n        {\r\n            ValidateValues(values);\r\n            return operatorFactory(column, values);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            throw new ArgumentException(\"Failed to create operator.\", ex);\r\n        }\r\n    }\r\n\r\n    private static ICondition CreateStartsWithOperator(string column, object[] values)\r\n    {\r\n        return CreateOperator(\r\n            (columnValue, parameterValue) => new StartsWithOperator(columnValue, parameterValue[0].ToString()), column,\r\n            values);\r\n    }\r\n\r\n    private static ICondition CreateEndsWithOperator(string column, object[] values)\r\n    {\r\n        return CreateOperator(\r\n            (columnValue, parameterValue) => new EndsWithOperator(columnValue, parameterValue[0].ToString()), column,\r\n            values);\r\n    }\r\n\r\n    private static ICondition CreateInOperator(string column, object[] values)\r\n    {\r\n        return CreateOperator((columnValue, parameterValue) => new InOperator(columnValue, parameterValue), column,\r\n            values);\r\n    }\r\n\r\n    private static ICondition CreateNotInOperator(string column, object[] values)\r\n    {\r\n        return CreateOperator((columnValue, parameterValue) => new NotInOperator(columnValue, parameterValue), column,\r\n            values);\r\n    }\r\n\r\n    private static ICondition CreateEqualOperator(string column, object[] values)\r\n    {\r\n        return CreateOperator((columnValue, parameterValue) => new EqualOperator(columnValue, parameterValue[0]),\r\n            column, values);\r\n    }\r\n\r\n    private static ICondition CreateLikeOperator(string column, object[] values)\r\n    {\r\n        return CreateOperator(\r\n            (columnValue, parameterValue) => new LikeOperator(columnValue, parameterValue[0].ToString()), column,\r\n            values);\r\n    }\r\n\r\n    private static ICondition CreateNotEqualOperator(string column, object[] values)\r\n    {\r\n        return CreateOperator((columnValue, parameterValue) => new NotEqualOperator(columnValue, parameterValue[0]),\r\n            column, values);\r\n    }\r\n\r\n    private static ICondition CreateNotLikeOperator(string column, object[] values)\r\n    {\r\n        return CreateOperator(\r\n            (columnValue, parameterValue) => new NotLikeOperator(columnValue, parameterValue[0].ToString()), column,\r\n            values);\r\n    }\r\n\r\n    private static ICondition CreateLessThanOperator(string column, object[] values)\r\n    {\r\n        return CreateOperator((columnValue, parameterValue) => new LessThanOperator(columnValue, parameterValue[0]),\r\n            column, values);\r\n    }\r\n\r\n    private static ICondition CreateGreaterThanOperator(string column, object[] values)\r\n    {\r\n        return CreateOperator((columnValue, parameterValue) => new GreaterThanOperator(columnValue, parameterValue[0]),\r\n            column, values);\r\n    }\r\n\r\n    private static ICondition CreateLessOrEqualThanOperator(string column, object[] values)\r\n    {\r\n        return CreateOperator(\r\n            (columnValue, parameterValue) => new LessOrEqualThanOperator(columnValue, parameterValue[0]), column,\r\n            values);\r\n    }\r\n\r\n    private static ICondition CreateGreaterOrEqualThanOperator(string column, object[] values)\r\n    {\r\n        return CreateOperator(\r\n            (columnValue, parameterValue) => new GreaterOrEqualThanOperator(columnValue, parameterValue[0]), column,\r\n            values);\r\n    }\r\n\r\n    public static ICondition ParseOperator(string operatorAlias, string column, object[] values)\r\n    {\r\n        if (OperatorAliases.TryGetValue(operatorAlias.ToLowerInvariant(), out var operatorFactory))\r\n            return CreateOperator(operatorFactory, column, values);\r\n\r\n        throw new ArgumentException($\"Invalid operator: {operatorAlias}\");\r\n    }\r\n}
===================================================================
diff --git a/QueryVortex.Core/OperatorParser.cs b/QueryVortex.Core/OperatorParser.cs
--- a/QueryVortex.Core/OperatorParser.cs	
+++ b/QueryVortex.Core/OperatorParser.cs	
@@ -1,5 +1,8 @@
+using System.Web;
+
 namespace QueryVortex.Core;
 
+
 public static class OperatorParser
 {
     private static readonly Dictionary<string, Func<string, object[], ICondition>> OperatorAliases =
@@ -129,4 +132,4 @@
 
         throw new ArgumentException($"Invalid operator: {operatorAlias}");
     }
-}
\ No newline at end of file
+}
